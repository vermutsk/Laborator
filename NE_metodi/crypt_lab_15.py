import random

prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,
              107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223,
              227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,
              349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421,
              431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563,
              569, 571, 577, 587, 593, 599, 601, 607, 613, 617,
              619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757,
              761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,
              839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983,
              991, 997, 1009, 1013, 1019, 1021, 1031,
              1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151,
              1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259,
              1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399,
              1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487,
              1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,
              1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733,
              1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873,
              1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999]


def dvoich(n):
    b = ''
    while n > 0:
        b = b + str(n % 2)
        n = n // 2
    return b


def quick_pow_mod(a, s, n):
    '''
    быстрая степень по модулю
    a - число которое возводим
    s - степень
    n - модуль
    '''
    b = dvoich(s)
    y = a
    x = pow(a, int(b[0]))
    for i in range(1, len(b)):
        y = (pow(y, 2)) % n
        if int(b[i]):
            x = (x * y) % n
            # число в двоичном виде должно быть в обратном порядке
    return x


def Ferma(num, t=5):
    for i in range(t):
        a = random.randint(2, num - 2)
        r = quick_pow_mod(a, num - 1, num)
        if r != 1:
            return False
    return True


def gen_simple(size):
    while True:
        num = random.getrandbits(size)
        b = bin(num)[2:]
        if b[-1] == '0':
            continue
        else:
            for i in range(len(prime_list)):
                if num % prime_list[i] == 0:
                    continue
            check = Ferma(num)
            if check:
                return num
            else:
                continue


def NOD(u, v):
    if (u < 0):
        u = (-1) * u
    if (v < 0):
        v = (-1) * v
    x = u
    y = v
    g = 1
    while (x % 2 == 0 and y % 2 == 0):
        x = x / 2
        y = y / 2
        g = g * 2
    while (x != 0):
        while (x % 2 == 0):
            x = x / 2
        while (y % 2 == 0):
            y = y / 2
        if (x >= y):
            x = x - y
        else:
            y = y - x
    d = int(g * y)
    return d


def T_to_A_1() -> int:
    p = gen_simple(8)
    q = gen_simple(8)
    n = p * q
    return n


def A_to_B_2(n: int):  # А получил n от доверительного центра Т
    while True:
        s = random.randint(1, n - 1)
        if NOD(s, n) == 1:
            break
        else:
            continue
    v = (s ** 2) % n
    return v, s


def A_to_B_31(n: int):  # А знает n из 2 шага
    z = random.randint(1, n - 1)
    x = (z ** 2) % n
    return x, z


def B_to_A_32():
    c = random.randint(0, 1)
    return c


def A_to_B_33(c, n, s, z):  # А получает:  n на первой шаге, s - высчитывает на 2 шаге, z - высчитывает в шаге 3.1
    if c == 0:
        y = z
    elif c == 1:
        y = z * s % n
    return y


def B_34(y, n, v, x, c):  # B получает: n - ?, v - на шаге 2, x - на шаге 3.1, c - высчитываеться на шаге 3.2
    if y != 0:
        y_1 = (y ** 2) % n
        y_2 = x * (v ** c) % n
        #print(y_1, y_2)
        if y_1 == y_2:
            return True  # Выход из итераций
        else:
            return False  # Продолжаем итерации
    else:
        return False  # Продолжаем итерации


def main():
    n = T_to_A_1()
    print(n, 'n')
    v, s = A_to_B_2(n)
    print(v, 'v', s, 's')
    print('Итеративная процедура протокола начинаеться')
    for i in range(10):
        print('Итерация')
        x, z = A_to_B_31(n)
        c = B_to_A_32()
        y = A_to_B_33(c, n, s, z)
        flag = B_34(y, n, v, x, c)
        if flag:
            continue
        else:
            print('Лови обманьщика!')
            return 0
    print('идентификация успешно завершена')
    # print('Итеративная процедура протокола завершена')


if __name__ == '__main__':
    main()
